version: '3.8'

services:
  backend:
    build:
      context: ./socketsphere
      dockerfile: Dockerfile
    container_name: chat-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=${MONGODB_URI:-mongodb://mongo:27017/socketsphere}
    depends_on:
      - mongo
    networks:
      - chat-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: chat-frontend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:3000
      - PORT=3001
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - chat-network

  mongo:
    image: mongo:7-jammy
    container_name: chat-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=socketsphere
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
    networks:
      - chat-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

networks:
  chat-network:
    driver: bridge

volumes:
  mongo-data:
    driver: local
  mongo-config:
    driver: local